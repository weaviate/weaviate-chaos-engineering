name: Test matrix

on:
  workflow_dispatch:
    inputs:
      weaviate_version:
        description: "The weaviate docker image to version to run tests against"
        type: string
        required: true
      test_to_run:
        description: "The name of the chaos test to run. It takes the name of the test from the tests.yaml file as input. Example: 'filter-memory-leak'. If not passed, all tests will run."
        required: false
        default: ''
        type: string
      issue_number:
        description: "Optional: The issue number to update in the QA project board"
        type: string
        default: ''
        required: false
  schedule:
    - cron: '0 0 */2 * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || inputs.weaviate_version || github.ref }}
  cancel-in-progress: true

jobs:
  checkout:
    runs-on: ubicloud-standard-2
    steps:
      - uses: actions/checkout@v2
  weaviate-version-information:
    runs-on: ubicloud-standard-2
    env:
      weaviate_version: "${{inputs.weaviate_version || '1.27.2'}}"
    outputs:
      weaviate_version: ${{ steps.set-output.outputs.weaviate_version }}
    steps:
      - id: set-output
        run: |
          echo "Running chaos pipelines against Weaviate version: $weaviate_version" >> $GITHUB_STEP_SUMMARY
          echo "weaviate_version=${{ env.weaviate_version }}" >> $GITHUB_OUTPUT
  run-with-sync-indexing:
    strategy:
      fail-fast: false
      matrix:
        lsm_access_strategy: ["mmap", "pread"]
    uses: ./.github/workflows/tests.yaml
    with:
      lsm_access_strategy: ${{matrix.lsm_access_strategy}}
      weaviate_version: ${{ github.event_name == 'schedule' && 'nightly' || inputs.weaviate_version || '1.27.2' }}
    secrets:
      AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      GCP_SERVICE_ACCOUNT_BENCHMARKS: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
      POLARSIGNALS_TOKEN: ${{secrets.POLARSIGNALS_TOKEN}}
  cleanup-cancelled-instances:
    needs: [run-with-sync-indexing]
    if: always() && (cancelled() || failure())
    runs-on: ubicloud-standard-2
    steps:
      - uses: actions/checkout@v3
      - id: 'gcs_auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: eu-central-1
      - name: Cleanup cancelled GCP instances
        run: ./cleanup_cancelled_gcp_instances.sh
      - name: Cleanup cancelled AWS resources
        run: ./cleanup_cancelled_aws_resources.sh
  send-slack-message-on-failure:
    needs: [weaviate-version-information, run-with-sync-indexing]
    if: failure() && github.event_name == 'schedule'
    runs-on: ubicloud-standard-2
    env:
      SLACK_CHANNEL: 'C074U2W8FU3'
    steps:
      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # This data has been defined as a Workflow in the slack channel chaos-pipeline
          payload: |
            {
              "message": "Chaos pipeline failed for Weaviate version: latest.\nLink: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "slack_channel": "${{ env.SLACK_CHANNEL }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  notify-results-to-weaviate-qa:
    needs: [run-with-sync-indexing]
    runs-on: ubicloud-standard-2
    if: always()
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.QA_APP_ID }}
          private_key: ${{ secrets.QA_APP_PRIVATE_KEY }}
  
      - name: Determine test result
        if: inputs.issue_number != ''
        id: test_result
        run: |
          if [ "${{ needs.run-with-sync-indexing.result }}" == "success" ]; then
            echo "status=Passed" >> $GITHUB_OUTPUT
          else
            echo "status=Failed" >> $GITHUB_OUTPUT
          fi

      - name: Notify weaviate-qa repository
        if: inputs.issue_number != ''
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/weaviate/weaviate-qa/actions/workflows/update_project.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "issue_number": "${{ github.event.inputs.issue_number }}",
                "target": "Chaos",
                "status": "${{ steps.test_result.outputs.status }}",
                "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "url_field_name": "Chaos Job"
              }
            }'

  notify-in-progress-to-weaviate-qa:
    runs-on: ubicloud-standard-2
    if: always()
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.QA_APP_ID }}
          private_key: ${{ secrets.QA_APP_PRIVATE_KEY }}
  
      - name: Notify weaviate-qa repository
        if: inputs.issue_number != ''
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/weaviate/weaviate-qa/actions/workflows/update_project.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "issue_number": "${{ github.event.inputs.issue_number }}",
                "target": "Chaos",
                "status": "In progress",
                "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "url_field_name": "Chaos Job"
              }
            }'
          