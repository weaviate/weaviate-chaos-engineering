name: Chaos tests

env:
  WEAVIATE_VERSION: preview-raft-add-initial-migration-from-non-raft-to-raft-based-representation-9d169cb
on:
  workflow_call:
    inputs:
      lsm_access_strategy:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      GCP_SERVICE_ACCOUNT_BENCHMARKS:
        required: true
      POLARSIGNALS_TOKEN:
        required: true
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
  #ann-benchmarks-sift-aws:
  #  name: "[bench AWS] SIFT1M pq=false"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY}}
  #    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #    DATASET: sift-128-euclidean
  #    DISTANCE: l2-squared
  #    REQUIRED_RECALL: 0.999
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_aws.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #ann-benchmarks-glove-aws:
  #  name: "[bench AWS] Glove100 pq=false"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY}}
  #    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #    DATASET: glove-100-angular
  #    DISTANCE: cosine
  #    REQUIRED_RECALL: 0.965
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_aws.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #ann-benchmarks-pq-sift-aws:
  #  name: "[bench AWS] SIFT1M pq=true"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY}}
  #    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #    DATASET: sift-128-euclidean
  #    DISTANCE: l2-squared
  #    REQUIRED_RECALL: 0.992
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_compression_aws.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #ann-benchmarks-pq-glove-aws:
  #  name: "[bench AWS] Glove100 pq=true"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY}}
  #    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #    DATASET: glove-100-angular
  #    DISTANCE: cosine
  #    REQUIRED_RECALL: 0.89
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_compression_aws.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #ann-benchmarks-sift-gcp:
  #  name: "[bench GCP] SIFT1M pq=false"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    DATASET: sift-128-euclidean
  #    DISTANCE: l2-squared
  #    REQUIRED_RECALL: 0.999
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_gcp.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #ann-benchmarks-pq-sift-gcp:
  #  name: "[bench GCP] SIFT1M pq=true"
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    DATASET: sift-128-euclidean
  #    DISTANCE: l2-squared
  #    REQUIRED_RECALL: 0.992
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - id: 'gcs_auth'
  #      name: 'Authenticate to Google Cloud'
  #      uses: 'google-github-actions/auth@v1'
  #      with:
  #        credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_BENCHMARKS}}
  #    - name: 'Set up Cloud SDK'
  #      uses: 'google-github-actions/setup-gcloud@v1'
  #    - name: Run chaos test
  #      if: always()
  #      run: ./ann_benchmark_compression_gcp.sh
  #    - id: 'upload-files'
  #      uses: 'google-github-actions/upload-cloud-storage@v1'
  #      with:
  #        path: 'results'
  #        destination: 'ann-pipelines/github-action-runs'
  #        glob: '*.json'
  #batch-import-many-classes:
  #  name: One class reveices long and expensive batches, user tries to create and delete 100s of classes in parallel
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./batch_import_many_classes.sh
  #upgrade-journey:
  #  name: Rolling updates in single-node setup from min to target version
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #    NUM_NODES: 1
  #    MINIMUM_WEAVIATE_VERSION: 1.15.0
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Set up Go
  #      uses: actions/setup-go@v3
  #      with:
  #        go-version: '1.20'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./upgrade_journey.sh
  #upgrade-journey-cluster:
  #  name: Rolling updates in multi-node setup from min to target version
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #    NUM_NODES: 3
  #    MINIMUM_WEAVIATE_VERSION: 1.22.0
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Set up Go
  #      uses: actions/setup-go@v3
  #      with:
  #        go-version: '1.20'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./upgrade_journey.sh
  #replicated-imports-with-choas-killing:
  #  name: Replicated imports with chaos killing
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./replication_importing_while_crashing.sh
  #replicated-imports-with-backup:
  #  name: Replicated imports with backup loop
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./replication_importing_with_backup.sh
  #replication-tunable-consistency:
  #  name: Replication tunable consistency
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./replication_tunable_consistency.sh
  #counting-while-compacting:
  #  name: Counting while compacting
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./counting_while_compacting.sh
  #segfault-on-batch-ref:
  #  name: Segfault on batch ref
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./segfault_batch_ref.sh
  #import-with-kills:
  #  name: Import during constant kills/crashes
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./import_while_crashing.sh
  #heavy-imports-crashing:
  #  name: Heavy object store imports while crashing
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./import_while_crashing_no_vector.sh
  #segfault-filtered-search:
  #  name: Segfault on filtered vector search (race with hash bucket compaction)
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./segfault_filtered_vector_search.sh
  #backup-restore-crud:
  #  name: Backup & Restore CRUD
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./backup_and_restore_crud.sh
  #backup-restore-crud-multi-node:
  #  name: Backup & Restore multi node CRUD
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./backup_and_restore_multi_node_crud.sh
  #backup-restore-version-compat:
  #  name: Backup & Restore version compatibility
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./backup_and_restore_version_compatibility.sh
  #compare-recall:
  #  name: Compare Recall after import to after restart
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./compare_recall_after_restart.sh
  #concurrent-read-write:
  #  name: Concurrent inverted index read/write
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./concurrent_inverted_index_read_write.sh
  #consecutive-create-update:
  #  name: Consecutive create and update operations
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./consecutive_create_and_update_operations.sh
  #batch-insert-mismatch:
  #  name: Batch insert mismatch
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./consecutive_create_and_update_operations.sh
  #rest-patch-restart:
  #  name: REST PATCH requests stop working after restart
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./rest_patch_stops_working_after_restart.sh
  #delete-recreate-updates:
  #  name: Delete and recreate class with frequent updates
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./delete_and_recreate_class.sh
  #geo-crash:
  #  name: Preventing crashing of geo properties during HNSW maintenance cycles
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./geo_crash.sh
  #compaction-roaringset:
  #  name: Preventing panic on compaction of roaringsets
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./compaction_roaringset.sh
  #multi-node-references:
  #  name: Large batches with many cross-refs on a multi-node cluster
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./multi_node_ref_imports.sh
  #multi-tenancy-concurrent-imports:
  #  name: Concurrent clients importing into multi-node cluster
  #  runs-on: ubuntu-latest-8-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./multi_tenancy_concurrent_importing.sh
  #multi_tenancy_activate_deactivate:
  #  name: Activate and deactivate tenants' shards
  #  runs-on: ubuntu-latest-4-cores
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./multi_tenancy_activate_deactivate.sh
  #goroutine_leak_class_delete:
  #  name: Check for degraded performance from goroutine leak on class delete
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./goroutine_leak_on_class_delete.sh
  #bm25_corruption:
  #  name: Validate that the BM25 (and other indexes) index does not corrupt when crashes occur during batch delete
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 60
  #  env:
  #    PERSISTENCE_LSM_ACCESS_STRATEGY: ${{inputs.lsm_access_strategy}}
  #  steps:
  #    - uses: actions/checkout@v3
  #    # - name: Polar Signals Continuous Profiling
  #    #   uses: polarsignals/gh-actions-ps-profiling@v0.0.1
  #    #   with:
  #    #     polarsignals_cloud_token: ${{ secrets.POLARSIGNALS_TOKEN }}
  #    #     labels: 'job=${{ github.job }};gh_run_id=${{ github.run_id }}'
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{secrets.DOCKER_USERNAME}}
  #        password: ${{secrets.DOCKER_PASSWORD}}
  #    - name: Run chaos test
  #      run: ./bm25_corruption.sh
  ## Commented only because this chaos pipeline was able to interrupt save operation
  ## just in the middle of it being performed and since Weaviate doesn't have a transaction
  ## mechanism implemented then this was causing an error which is a different error then
  ## the discrepancy one, but this pipeline is really good in crashing Weaviate so we want to
  ## save it for future tests
  ## compare-while-crashing:
  ##   name: Compare REST and GraphQL while crashing
  ##   runs-on: ubuntu-latest-4-cores
  ann-benchmarks-sift-local-k8s:
    name: Ann-benchmark in a k8s cluster using helm
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      HELM_BRANCH: 'raft-configuration'
      REPLICAS: 3
      SETUP: 'k8s'
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run ann-benchmark in k8s cluster
        run: ./ann_benchmark.sh
      # - name: Create Kind config file
      #   run: |
      #     cat <<EOF > kind-config.yaml
      #     kind: Cluster
      #     apiVersion: kind.x-k8s.io/v1alpha4
      #     nodes:
      #       - role: control-plane
      #     $(for i in {1..${{ env.REPLICAS }}}; do echo "  - role: worker"; done)
      #     EOF
      # - name: Create k8s Kind Cluster
      #   uses: helm/kind-action@v1
      #   with:
      #     wait: 120s
      #     cluster_name: weaviate-k8s
      #     config: kind-config.yaml
      # - name: Install Helm
      #   uses: azure/setup-helm@v1
      #   with:
      #     version: 'v3.6.3' # replace with your desired Helm version
      # # - name: Add Helm repo
      # #   run: helm repo add weaviate https://weaviate.github.io/weaviate-helm
      # - name: Download weaviate-helm repository branch ${{ env.HELM_BRANCH}}
      #   uses: actions/checkout@v3
      #   with:
      #     repository: weaviate/weaviate-helm
      #     ref: ${{ env.HELM_BRANCH }}
      #     path: weaviate-helm
      # - name: Package Weaviate Helm chart
      #   run: helm package weaviate-helm/weaviate
      # - name: Create namespace
      #   run: kubectl create namespace weaviate
      # - name: Install Weaviate using Helm
      #   run: |
      #     helm upgrade --install weaviate ./weaviate-*tgz \
      #       --namespace weaviate \
      #       --set image.tag=${{ env.WEAVIATE_VERSION }} \
      #       --set replicas=${{ env.REPLICAS }} \
      #       --set grpcService.enabled=true \
      #       --set debug=true 
      # - name: Wait for weaviate to be up
      #   run: |
      #     kubectl wait sts/weaviate -n weaviate --for jsonpath='{.status.readyReplicas}'=${{ env.REPLICAS }} --timeout=60s
      # - name: Expose weaviate port locally into 8080
      #   run: |
      #       nohup kubectl port-forward svc/weaviate 8080:80 -n weaviate &
      # - name: Expose gRPC port locally into 50051
      #   run: |
      #       nohup kubectl port-forward svc/weaviate-grpc 50051:50051 -n weaviate &
      # - name: Check if weaviate is up
      #   run: |
      #     curl http://127.0.0.1:8080/v1/nodes
      - name: Retreive weaviate logs
        if: failure()
        run: |
          kubectl logs -n weaviate -l app.kubernetes.io/name=weaviate


