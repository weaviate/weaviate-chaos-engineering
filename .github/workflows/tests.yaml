name: Chaos tests

env:
  WEAVIATE_VERSION: preview-deprecates-string-array-data-type-enriches-text-array-tokenization-options-7bdb5ba
  MINIMUM_WEAVIATE_VERSION: 1.15.0 # this is used as the start in the upgrade journey test
on:
  push
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
  upgrade-journey:
    name: Rolling updates in multi-node setup from min to target version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./upgrade_journey.sh
  replicated-imports-with-choas-killing:
    name: Replicated imports with chaos killing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./replication_importing_while_crashing.sh
  replication-tunable-consistency:
    name: Replication tunable consistency
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./replication_tunable_consistency.sh
  counting-while-compacting:
    name: Counting while compacting
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./counting_while_compacting.sh
  segfault-on-batch-ref:
    name: Segfault on batch ref
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./segfault_batch_ref.sh
  import-with-kills:
    name: Import during constant kills/crashes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./import_while_crashing.sh
  heave-imports-crashing:
    name: Heavy object store imports while crashing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./import_while_crashing_no_vector.sh
  segfault-filtered-search:
    name: Segfault on filtered vector search (race with hash bucket compaction)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./segfault_filtered_vector_search.sh
  backup-restore-crud:
    name: Backup & Restore CRUD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./backup_and_restore_crud.sh
  backup-restore-crud-multi-node:
    name: Backup & Restore multi node CRUD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./backup_and_restore_multi_node_crud.sh
  backup-restore-version-compat:
    name: Backup & Restore version compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./backup_and_restore_version_compatibility.sh
  compare-recall:
    name: Compare Recall after import to after restart
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./compare_recall_after_restart.sh
  concurrent-read-write:
    name: Concurrent inverted index read/write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./concurrent_inverted_index_read_write.sh
  consecutive-create-update:
    name: Consecutive create and update operations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./consecutive_create_and_update_operations.sh
  batch-insert-missmatch:
    name: Batch insert mismatch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./consecutive_create_and_update_operations.sh
  rest-patch-restart:
    name: REST PATCH requests stop working after restart
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./rest_patch_stops_working_after_restart.sh
  delete-recreate-updates:
    name: Delete and recreate class with frequent updates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./delete_and_recreate_class.sh
  geo-crash:
    name: Preventing crashing of geo properties during HNSW maintenance cycles
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Run chaos test
        run: ./geo_crash.sh
  # Commented only because this chaos pipeline was able to interrupt save operation
  # just in the middle of it being performed and since Weaviate doesn't have a transaction
  # mechanism implemented then this was causing an error which is a different error then
  # the discrepancy one, but this pipeline is really good in crashing Weaviate so we want to
  # save it for future tests
  # compare-while-crashing:
  #   name: Compare REST and GraphQL while crashing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{secrets.DOCKER_USERNAME}}
  #         password: ${{secrets.DOCKER_PASSWORD}}
  #     - name: Run chaos test
  #       run: ./compare_rest_graphql_while_crashing.sh
