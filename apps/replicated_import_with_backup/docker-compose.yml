version: '3.9'
services:
  weaviate-node-1: # same as extended service to avoid reconfiguring cluster comm
    extends:
      file: ./../weaviate/docker-compose-replication.yml
      service: weaviate-node-1
    container_name: weaviate-node-1
    environment:
      ENABLE_MODULES: 'backup-s3'
      BACKUP_S3_ENDPOINT: 'backup-s3:9000'
      BACKUP_S3_BUCKET: 'weaviate-backups'
      BACKUP_S3_USE_SSL: 'false'
      AWS_ACCESS_KEY_ID: 'aws_access_key'
      AWS_SECRET_KEY: 'aws_secret_key'
    depends_on:
      - backup-s3

  weaviate-node-2: # same as extended service to avoid reconfiguring cluster comm
    extends:
      file: ./../weaviate/docker-compose-replication.yml
      service: weaviate-node-2
    container_name: weaviate-node-2
    environment:
      ENABLE_MODULES: 'backup-s3'
      BACKUP_S3_ENDPOINT: 'backup-s3:9000'
      BACKUP_S3_BUCKET: 'weaviate-backups'
      BACKUP_S3_USE_SSL: 'false'
      AWS_ACCESS_KEY_ID: 'aws_access_key'
      AWS_SECRET_KEY: 'aws_secret_key'
    depends_on:
      - backup-s3

  weaviate-node-3: # same as extended service to avoid reconfiguring cluster comm
    extends:
      file: ./../weaviate/docker-compose-replication.yml
      service: weaviate-node-3
    container_name: weaviate-node-3
    environment:
      ENABLE_MODULES: 'backup-s3'
      BACKUP_S3_ENDPOINT: 'backup-s3:9000'
      BACKUP_S3_BUCKET: 'weaviate-backups'
      BACKUP_S3_USE_SSL: 'false'
      AWS_ACCESS_KEY_ID: 'aws_access_key'
      AWS_SECRET_KEY: 'aws_secret_key'
    depends_on:
      - backup-s3

  backup-s3:
    image: minio/minio
    container_name: backup-s3
    ports:
      - "9000:9000"
    volumes:
      - ./../../weaviate-data/backups-s3:/data
    environment:
      MINIO_ROOT_USER: 'aws_access_key'
      MINIO_ROOT_PASSWORD: 'aws_secret_key'
    command: server /data

  create-s3-bucket:
    image: minio/mc
    container_name: create-s3-bucket
    depends_on:
      - backup-s3
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set chaos http://backup-s3:9000 aws_access_key aws_secret_key;
      /usr/bin/mc mb chaos/weaviate-backups;
      /usr/bin/mc rm --force --recursive --quiet chaos/weaviate-backups;
      /usr/bin/mc policy set public chaos/weaviate-backups;
      exit 0;
      "

  remove-s3-bucket:
    image: minio/mc
    container_name: remove-s3-bucket
    depends_on:
      - backup-s3
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set chaos http://backup-s3:9000 aws_access_key aws_secret_key;
      /usr/bin/mc rb --force chaos/weaviate-backups;
      exit 0;
      "

  importer-schema-node-1:
    build: ./../replicated-import/
    container_name: importer-schema-node-1
    command: ['python3', 'run.py', '--action', 'schema']
    network_mode: 'host'
    tty: true
    environment:
      - CONFIG_REPLICATION_FACTOR=2
      - CONFIG_HOST=http://localhost:8080

  importer-data-node-1:
    build: ./../replicated-import/
    container_name: importer-data-node-1
    command: ['python3', 'run.py', '--action', 'import']
    network_mode: 'host'
    tty: true
    environment:
      - CONFIG_HOST=http://localhost:8080
      - CONFIG_OBJECT_COUNT=500_000
      - CONFIG_BATCH_SIZE=1_000
      - CONFIG_UUID_OFFSET=0

  importer-data-node-2:
    build: ./../replicated-import/
    container_name: importer-data-node-2
    command: ['python3', 'run.py', '--action', 'import']
    network_mode: 'host'
    tty: true
    environment:
      - CONFIG_HOST=http://localhost:8081
      - CONFIG_OBJECT_COUNT=500_000
      - CONFIG_BATCH_SIZE=1_000
      - CONFIG_UUID_OFFSET=500_000

  backup-loop-node-1:
    build: .
    container_name: backup-loop-node-1
    command: ['python3', 'run.py']
    network_mode: 'host'
    tty: true
    environment:
      - CONFIG_HOST=http://localhost:8080
      - CONFIG_BACKUP_BACKEND=s3
